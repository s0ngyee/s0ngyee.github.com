<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | s0ngyee]]></title>
  <link href="http://blog.songyee.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://blog.songyee.com/"/>
  <updated>2013-01-24T20:45:51+08:00</updated>
  <id>http://blog.songyee.com/</id>
  <author>
    <name><![CDATA[s0ngyee Bian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为Octopress添加Tag Clouds]]></title>
    <link href="http://blog.songyee.com/blog/2013/01/21/wei-octopresstian-jia-tag-clouds/"/>
    <updated>2013-01-21T12:12:00+08:00</updated>
    <id>http://blog.songyee.com/blog/2013/01/21/wei-octopresstian-jia-tag-clouds</id>
    <content type="html"><![CDATA[<p>给blog添加了标签云的功能，不支持中文。</p>

<p>记录一下折腾流程。</p>

<!--more-->


<p>主要流程参照<a href="http://agiledon.github.com/blog/2013/01/08/create-tag-for-octopress/">这篇</a></p>

<h3>Tag Cloud插件</h3>

<p>通过修改第三方插件<a href="https://github.com/bizkit/octopress-cumulus">octopress-cumulus</a>来实现Tag Cloud的功能。</p>

<p>按原文的说法这个插件实质是category cloud的插件，因为category 和tag表示不同的维度，要用tag cloud就在这个基础上进行修改。</p>

<p>下载源码后将插件用到的文件复制到octopress的相应目录tagcloud.swf和category_generator.rb（octopress自带的插件，源码中没有找到）用于生成3D效果Flash，category_cloud.html边栏模板。</p>

<h3>生成Tag目录</h3>

<p>插件plugins/tag_generator.rb 是根据系统自带的category_generator.rb 修改的，主要功能用于读取post的markdown文件里的tags标签值，并生成相应目录，代码如下:
``` ruby tag_generator.rb
module Jekyll</p>

<p>  # The TagIndex class creates a single tag page for the specified tag.
  class TagIndex &lt; Page</p>

<pre><code># Initializes a new TagIndex.
#
#  +base+         is the String path to the &lt;source&gt;.
#  +tag_dir+ is the String path between &lt;source&gt; and the tag folder.
#  +tag+     is the tag currently being processed.
def initialize(site, base, tag_dir, tag)
  @site = site
  @base = base
  @dir  = tag_dir
  @name = 'index.html'
  self.process(@name)
  # Read the YAML data from the layout page.
  self.read_yaml(File.join(base, '_layouts'), 'tag_index.html')
  self.data['tag']    = tag
  # Set the title for this page.
  title_prefix             = site.config['tag_title_prefix'] || 'Tag: '
  self.data['title']       = "#{title_prefix}#{tag}"
  # Set the meta-description for this page.
  meta_description_prefix  = site.config['tag_meta_description_prefix'] || 'Tag: '
  self.data['description'] = "#{meta_description_prefix}#{tag}"
end
</code></pre>

<p>  end</p>

<p>  # The tagFeed class creates an Atom feed for the specified tag.
  class TagFeed &lt; Page</p>

<pre><code># Initializes a new tagFeed.
#
#  +base+         is the String path to the &lt;source&gt;.
#  +tag_dir+ is the String path between &lt;source&gt; and the tag folder.
#  +tag+     is the tag currently being processed.
def initialize(site, base, tag_dir, tag)
  @site = site
  @base = base
  @dir  = tag_dir
  @name = 'atom.xml'
  self.process(@name)
  # Read the YAML data from the layout page.
  self.read_yaml(File.join(base, '_includes/custom'), 'tag_feed.xml')
  self.data['tag']    = tag
  # Set the title for this page.
  title_prefix             = site.config['tag_title_prefix'] || 'Tag: '
  self.data['title']       = "#{title_prefix}#{tag}"
  # Set the meta-description for this page.
  meta_description_prefix  = site.config['tag_meta_description_prefix'] || 'Tag: '
  self.data['description'] = "#{meta_description_prefix}#{tag}"

  # Set the correct feed URL.
  self.data['feed_url'] = "#{tag_dir}/#{name}"
end
</code></pre>

<p>  end</p>

<p>  # The Site class is a built-in Jekyll class with access to global site config information.
  class Site</p>

<pre><code># Creates an instance of tagIndex for each tag page, renders it, and
# writes the output to a file.
#
#  +tag_dir+ is the String path to the tag folder.
#  +tag+     is the tag currently being processed.
def write_tag_index(tag_dir, tag)
  index = TagIndex.new(self, self.source, tag_dir, tag)
  index.render(self.layouts, site_payload)
  index.write(self.dest)
  # Record the fact that this page has been added, otherwise Site::cleanup will remove it.
  self.pages &lt;&lt; index

  # Create an Atom-feed for each index.
  feed = TagFeed.new(self, self.source, tag_dir, tag)
  feed.render(self.layouts, site_payload)
  feed.write(self.dest)
  # Record the fact that this page has been added, otherwise Site::cleanup will remove it.
  self.pages &lt;&lt; feed
end

# Loops through the list of tag pages and processes each one.
def write_tag_indexes
  if self.layouts.key? 'tag_index'
    dir = self.config['tag_dir'] || 'tags'
    self.tags.keys.each do |tag|
      self.write_tag_index(File.join(dir, tag.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase), tag)
    end

  # Throw an exception if the layout couldn't be found.
  else
    throw "No 'tag_index' layout found."
  end
end
</code></pre>

<p>  end</p>

<p>  # Jekyll hook - the generate method is called by jekyll, and generates all of the tag pages.
  class GenerateTags &lt; Generator</p>

<pre><code>safe true
priority :low

def generate(site)
  site.write_tag_indexes
end
</code></pre>

<p>  end</p>

<p>  # Adds some extra filters used during the tag creation process.
  module Filters</p>

<pre><code># Outputs a list of tags as comma-separated &lt;a&gt; links. This is used
# to output the tag list for each post on a tag page.
#
#  +tags+ is the list of tags to format.
#
# Returns string
#
def tag_links(tags)
  dir = @context.registers[:site].config['tag_dir']
  tags = tags.sort!.map do |item|
    "&lt;a class='category' href='http://blog.songyee.com/#{dir}/#{item.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase}/'&gt;#{item}&lt;/a&gt;"
  end

  case tags.length
  when 0
    ""
  when 1
    tags[0].to_s
  else
    "#{tags[0...-1].join(', ')}, #{tags[-1]}"
  end
end

# Outputs the post.date as formatted html, with hooks for CSS styling.
#
#  +date+ is the date object to format as HTML.
#
# Returns string
def date_to_html_string(date)
  result = '&lt;span class="month"&gt;' + date.strftime('%b').upcase + '&lt;/span&gt; '
  result += date.strftime('&lt;span class="day"&gt;%d&lt;/span&gt; ')
  result += date.strftime('&lt;span class="year"&gt;%Y&lt;/span&gt; ')
  result
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<h3>生成Tag Cloud</h3>

<p>保留原来的plugin/category_cloud.rb，重新添加tag_cloud.rb，将category_cloud.rb源码进行如下修改，并保存至tag_cloud.rb，通读了一下代码大致就是根据已经生成的tag列表以生成flash object标签并通过flashvars传入flash中要使用的参数。</p>

<p>``` ruby tag_cloud.rb
module Jekyll</p>

<p>  class TagCloud &lt; Liquid::Tag</p>

<pre><code>def initialize(tag_name, markup, tokens)
  @opts = {}
  @opts['bgcolor'] = '#ffffff'
  @opts['tcolor1'] = '#333333'
  @opts['tcolor2'] = '#333333'
  @opts['hicolor'] = '#000000'

  opt_names = ['bgcolor', 'tcolor1', 'tcolor2', 'hicolor']

  opt_names.each do |opt_name|
      if markup.strip =~ /\s*#{opt_name}:(#[0-9a-fA-F]+)/iu
        @opts[opt_name] = $1
        markup = markup.strip.sub(/#{opt_name}:\w+/iu,'')
      end
  end

  opt_names = opt_names[1..3]
  opt_names.each do |opt_name|
      @opts[opt_name] = '0x' + @opts[opt_name][1..8]
  end

  super
end

def render(context)
  lists = {}
  max, min = 1, 1
  config = context.registers[:site].config
  tag_dir = config['url'] + config['root'] + config['tag_dir'] + '/'
  tags = context.registers[:site].tags
  tags.keys.sort_by{ |str| str.downcase }.each do |tag|
    count = tags[tag].count
    lists[tag] = count
    max = count if count &gt; max
  end

  bgcolor = @opts['bgcolor']

  bgcolor = @opts['bgcolor']
  tcolor1 = @opts['tcolor1']
  tcolor2 = @opts['tcolor2']
  hicolor = @opts['hicolor']

  html = ''
  html &lt;&lt; "&lt;embed type='application/x-shockwave-flash' src='http://blog.songyee.com/javascripts/tagcloud.swf'"
  html &lt;&lt; "width='100%' height='250' bgcolor='#{bgcolor}' id='tagcloudflash' name='tagcloudflash' quality='high' allowscriptaccess='always'"

  html &lt;&lt; 'flashvars="'
  html &lt;&lt; "tcolor=#{tcolor1}&amp;amp;tcolor2=#{tcolor2}&amp;amp;hicolor=#{hicolor}&amp;amp;tspeed=100&amp;amp;distr=true&amp;amp;mode=tags&amp;amp;"

  html &lt;&lt; 'tagcloud='

  tagcloud = ''
  tagcloud &lt;&lt; '&lt;tags&gt;'


  lists.each do | tag, counter |
    url = tag_dir + tag.gsub(/_|\P{Word}/u, '-').gsub(/-{2,}/u, '-').downcase
    style = "font-size: #{10 + (40 * Float(counter)/max)}%"

    tagcloud &lt;&lt; "&lt;a href='#{url}' style='#{style}'&gt;#{tag}"
    tagcloud &lt;&lt; "&lt;/a&gt; "

  end

  tagcloud &lt;&lt; '&lt;/tags&gt;'

  # tagcloud urlencode
  tagcloud = CGI.escape(tagcloud)

  html &lt;&lt; tagcloud
  html &lt;&lt; '"&gt;'
  html
end
</code></pre>

<p>  end
end</p>

<p>Liquid::Template.register_tag('tag_cloud', Jekyll::TagCloud)
```</p>

<h3>Tag页</h3>

<p>在source/_layout目录下创建tag_index.html文件，可以参照category_index.html。将其中变量修改为tag相关</p>

<h2>``` html tag_index.html</h2>

<p>layout: page</p>

<h2>footer: false</h2>

<div id="blog-archives" class="category">
{ % for post in site.tags[page.tag] % }
{ % capture this_year % }{ % endcapture % }
{ % unless year == this_year % }
    { % assign year = this_year % }
    <h2></h2>
{ % endunless % }
<article>
    { % include archive_post.html % }
</article>
{ % endfor % }
</div>


<p>```</p>

<h3>Post页</h3>

<p>blog正文下部显示tag标签模板，具体代码模板如下
_layout/post.html在footer标签中添加如下代码，引用了post/tags.html，其实写一起也可以，但条例就显得不清了。
``` html post.html</p>

<p class="meta">
    Tags: { % include post/tags.html % }
</p>


<p>```</p>

<p>_includes/post目录下的tags.html代码如下：
``` html tag.html
{ % capture tag % }
{ % if post % }
{ { post.tags | tag_links | size } }
{ % else % }
{ { page.tags | tag_links | size } }
{ % endif % }
{ % endcapture % }
{ % unless tag == '0' % }
<span class="categories"></p>

<pre><code>{ % if post % }
    { { post.tags | tag_links } }
{ % else % }
    { { page.tags | tag_links } }
{ % endif % }
</code></pre>

<p></span>
{ % endunless % }
```</p>

<h3>配置</h3>

<p>修改配置文件_config.yml，添加tag_dir选项
<code>ruby _config.yml
tag_dir: blog/tags
</code></p>

<h3>边栏模板</h3>

<p>修改custom/asides目录下的模板文件tag_cloud.html
这个在原文里发觉作者漏了，但是下面的评论有人给补充了，贴上代码
``` yaml tag_cloud.html
<section></p>

<pre><code>&lt;h1&gt;Tag Cloud&lt;/h1&gt;
&lt;span id="tag-cloud"&gt;{ % category_cloud bgcolor:#f2f2f2 % }&lt;/span&gt;
</code></pre>

<p></section>
```</p>

<p>这样tag cloud就完成了。</p>

<ul>
<li>使用代码高亮时不知为何rb语言标识符无法解析以致于{ 和 %之间多加了个空格，暂时还没有找到原因</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Makefile 测试]]></title>
    <link href="http://blog.songyee.com/blog/2013/01/18/makefile-ce-shi/"/>
    <updated>2013-01-18T16:56:00+08:00</updated>
    <id>http://blog.songyee.com/blog/2013/01/18/makefile-ce-shi</id>
    <content type="html"><![CDATA[<p>Makefile脚本中应使用tab替代空格，参见<a href="http://blog.songyee.com/blog/2013/01/17/octopressda-jian-github-pages/">上篇</a> Makefile部分</p>

<!--more-->


<p>``` bash
blog:</p>

<pre><code>git pull &amp;&amp; \
rake setup_github_pages\[git@github.com:s0ngyee/s0ngyee.github.git\] &amp;&amp; \
bundle install &amp;&amp; \
rake integrate &amp;&amp; \
rake generate &amp;&amp; \
rake deploy &amp;&amp; \
git add .; \
git commit -am "${MSG}"; \
git push origin master
</code></pre>

<p>.PHONY: blog%
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress搭建github pages]]></title>
    <link href="http://blog.songyee.com/blog/2013/01/17/octopressda-jian-github-pages/"/>
    <updated>2013-01-17T17:21:00+08:00</updated>
    <id>http://blog.songyee.com/blog/2013/01/17/octopressda-jian-github-pages</id>
    <content type="html"><![CDATA[<p>折腾一天终于有所进展了。<br />
看了N篇blog，相关联的知识也找了不少磕磕绊绊的。<br />
写篇日志总结一下，文思如尿路，给自己看，不奢求写的有多流畅有多完美。</p>

<!-- more -->


<h3>简介</h3>

<p><a href="http://octopress.org/">Octopress</a>是使用Ruby语言编写的建立在jekyll上的一套blog系统。</p>

<p>优点:<br />
使用<a href="http://zh.wikipedia.org/wiki/Markdown">markdown</a>标记语言编写文章。<br />
与git集成，通过git对blog进行维护。<br />
可以与github pages进行集成，将个人blog免费托管在github上。<br /></p>

<p>个人缺乏相关知识:<br />
没有接触ruby及相关运行环境，对gem, rake, bundle等工具或类库没有概念。<br />
github没有实际做过代码托管。<br /></p>

<h3>Ruby</h3>

<h4>安装</h4>

<p>一开始采用源码编译的方式进行安装，之后发现无法解析yml文件，编译时忘记加入依赖类库的。惰性使然没有去找依赖类库重新编译，同学推荐rvm的方式来进行安装和管理，果断换一种方式。</p>

<h4>RVM</h4>

<p>安装RVM</p>

<p><code>bash
$ bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
</code></p>

<p>安装Ruby</p>

<p><code>bash
rvm install 1.9.3 &amp;&amp; rvm use 1.9.3
</code></p>

<h4>Gem</h4>

<p>RubyGems（简称 gems）是一个用于对 Rails 组件进行打包的 Ruby 打包系统。 它提供一个分发 Ruby 程序和库的标准格式，还提供一个管理程序包安装的工具。</p>

<p>详细介绍参阅了<a href="http://lanvige.iteye.com/blog/804477">这篇</a></p>

<h4>Bundle</h4>

<p>octopress安装过程中有用到bundle命令，顺便提一下bundle是用来管理项目中所有gem的依赖
Gem介绍中对bundle也有说明</p>

<h4>Rake</h4>

<p>简单而言，Rake是一个由ruby编写的build工具。</p>

<p>Rake是由ruby实现的，它的rakefile完全是由ruby语法定义的，所以它是一种内部DSL--基于另一种语言（宿主语言）编写的DSL。</p>

<p>参见<a href="http://rails-weekly.group.iteye.com/group/wiki/1830-rails-questions-weekly-15-rake">这里</a></p>

<hr />

<h3>github</h3>

<p>需要安装git，这里使用Mountain Lion内置的。</p>

<p>在本机生成ssh key，按着github上的<a href="https://help.github.com/articles/generating-ssh-keys">help</a>做的，将公钥加入github的帐户中。</p>

<p>在github上<a href="https://github.com/new">创建</a>一个版本库，因为后面要将octopress和github pages进行集成，版本库名称应为username.github.com</p>

<hr />

<h3>Octopress</h3>

<h4>安装</h4>

<ul>
<li><p>获取源码
<code>bash
git clone git://github.com/imathis/octopress.git octopress
ruby --version  //Ruby的版本需要在1.9.2版本以上
</code></p></li>
<li><p>安装依赖插件
<code>bash
gem install bundler
bundle install
</code></p></li>
<li><p>安装主题
<code>bash
rake install
</code></p></li>
<li><p>配置blog
参见<a href="http://octopress.org/docs/configuring/">这里</a></p></li>
<li><p>配置github分支
<code>bash
rake setup_github_pages
</code>
执行后会提示输入git的URL，输入刚才建立的git地址
<code>bash
git@github.com:username/username.github.com.git
</code></p></li>
</ul>


<h4>发表文章</h4>

<p><code>bash
rake new_post['post name']
</code>
在source/_post目录下会根据当前日期生成相应的目录以及文章的.markdown文件，使用markdown语言对文章内容进行编辑。</p>

<h4>生成预览</h4>

<p><code>bash
rake generate
rake preview
</code>
就可以在本地<a href="http://localhost:4000">http://localhost:4000</a>预览了。</p>

<h4>提交</h4>

<p>最后使用以下命令将blog内容提交到github上。
<code>bash
rake deploy
</code></p>

<h4>提交源码</h4>

<p>上一步完成以后，_deploy里的blog内容已经提交到了github上，并可以通过github pages进行访问了。此时本地git分支也会自动切换到source分支，最后将blog源码也提交到github上方便以后维护。
<code>bash
git add .
git commit -m 'commit message'
git push origin source
</code>
至此octopress基本功能部署完成，接下来就是对blog进行customize，目前为止就整了两个部分，如下所示。</p>

<h4>个性化域名</h4>

<p>想使用custom domain来替换原来的s0ngyee.github.com，依照教程所做的在根目录下创建CNAME文件内容为customize domain，可用以下命令进行创建
<code>bash
echo 'your-domain.com' &gt;&gt; source/CNAME
</code></p>

<p>然后在域名服务器上将二级域名指向到207.97.227.245，等域名服务器刷新便可以了。</p>

<hr />

<h3>插件及模板修改</h3>

<p>现在还缺少友情链接，文章评论的功能，关于的页面尚未完成。如有修改会及时进行记录。</p>

<h4>分类列表</h4>

<p>主要步骤如下</p>

<ul>
<li>编写基于Jekyll的插件，并在模板引擎中注册分类标签类，本人不懂ruby就看了个大概。</li>
<li>在边栏引用目录中添加新的边栏模板文件</li>
<li>修改配置文件边栏项</li>
</ul>


<p>详细参见<a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/">这篇</a></p>

<h4>微博分享</h4>

<p>今天在文章结尾处添加了微博分享的功能，照<a href="http://programus.github.com/blog/2012/03/04/share-weibo-button/">葫芦</a>画瓢跟着做。去新浪微博<a href="http://open.weibo.com/sharebutton">分享按钮</a>，生成按钮代码（最终是获取document.write里的那一段iframe代码）。等待测试...</p>

<hr />

<h3>Other</h3>

<h4>Markdown语法</h4>

<p>Markdown 是一种轻量级标记语言，创始人为John Gruber和Aaron Swartz。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。[1]这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p>

<p><a href="http://wowubuntu.com/markdown/">Markdown 语法说明</a></p>

<h5>Makefile</h5>

<p>同学给了一个Makefile文件，可以通过make命令直接发布blog，修改源码的时候看到Makefile最后有一个.PHONY不太明白于是又补了一下<a href="http://blog.csdn.net/xjtuse_mal/article/details/5404894">相关知识</a>，对这个稍稍有了了解。</p>

<p>在一个老外的<a href="http://kvz.io/blog/2012/09/25/blog-with-octopress/">blog</a>上找到了这段Makefile的出处</p>

<hr />

<h3>总结</h3>

<p>回顾一下整个安装部署流程，对于ruby一窍不同的我显得十分费力，折腾了两天体会到同学之前说的 ，如果相关知识都了解的话，半个小时一个小时就可以搞定的。全部流程走一遍，对一些名词总算有些概念了。</p>

<p>实在记不下这么多，还是用写的踏实点，之前一年养成用evernote的习惯，希望之后能够慢慢加强一下，记笔记的同时顺便将重要的东西发布在blog上。本篇还是边抄别人边自己总结，一字一字码出来的，虽说自己内容不多，只是把别人的东西重新组织整理了一下。</p>

<hr />

<h3>参考</h3>

<h4><a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a></h4>

<h4><a href="http://octopress.org/docs/configuring/">Configuring Octopress</a></h4>

<h4><a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a></h4>

<h4><a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">3rd-party-plugins</a></h4>
]]></content>
  </entry>
  
</feed>
